// <auto-generated />
using System;
using ClarifEye.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClarifEye.Data.Migrations
{
    [DbContext(typeof(ClarifEyeDbContext))]
    [Migration("20250601015813_Remove-Answer-Seeding")]
    partial class RemoveAnswerSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClarifEye.Data.Models.Choice", b =>
                {
                    b.Property<int>("ChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChoiceId"));

                    b.Property<string>("AnswerString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MultipleChoiceQuestionId")
                        .HasColumnType("int");

                    b.HasKey("ChoiceId");

                    b.HasIndex("MultipleChoiceQuestionId");

                    b.ToTable("Choices");

                    b.HasData(
                        new
                        {
                            ChoiceId = 1,
                            AnswerString = "Less than 1 year ago",
                            MultipleChoiceQuestionId = 1
                        },
                        new
                        {
                            ChoiceId = 2,
                            AnswerString = "1–2 years ago",
                            MultipleChoiceQuestionId = 1
                        },
                        new
                        {
                            ChoiceId = 3,
                            AnswerString = "More than 2 years ago",
                            MultipleChoiceQuestionId = 1
                        });
                });

            modelBuilder.Entity("ClarifEye.Data.Models.ChoiceAnswer", b =>
                {
                    b.Property<int>("ChoiceAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChoiceAnswerId"));

                    b.Property<int>("ChoiceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChoiceAnswerId");

                    b.HasIndex("ChoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("ChoiceAnswers");
                });

            modelBuilder.Entity("ClarifEye.Data.Models.MultipleChoiceQuestion", b =>
                {
                    b.Property<int>("MultipleChoiceQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MultipleChoiceQuestionId"));

                    b.Property<string>("QuestionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MultipleChoiceQuestionId");

                    b.ToTable("MultipleChoiceQuestions");

                    b.HasData(
                        new
                        {
                            MultipleChoiceQuestionId = 1,
                            QuestionString = "When was your last eye exam?"
                        });
                });

            modelBuilder.Entity("ClarifEye.Data.Models.ScaleAnswer", b =>
                {
                    b.Property<int>("ScaleAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScaleAnswerId"));

                    b.Property<string>("ClarUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ScaleQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOption")
                        .HasColumnType("int");

                    b.HasKey("ScaleAnswerId");

                    b.HasIndex("ClarUserId");

                    b.HasIndex("ScaleQuestionId");

                    b.ToTable("ScaleAnswers");
                });

            modelBuilder.Entity("ClarifEye.Data.Models.ScaleQuestion", b =>
                {
                    b.Property<int>("ScaleQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScaleQuestionId"));

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScaleQuestionId");

                    b.ToTable("ScaleQuestions");

                    b.HasData(
                        new
                        {
                            ScaleQuestionId = 1,
                            QuestionText = "Blurry vision"
                        },
                        new
                        {
                            ScaleQuestionId = 2,
                            QuestionText = "Double vision"
                        },
                        new
                        {
                            ScaleQuestionId = 3,
                            QuestionText = "Difficulty seeing at night"
                        },
                        new
                        {
                            ScaleQuestionId = 4,
                            QuestionText = "Halos around lights"
                        },
                        new
                        {
                            ScaleQuestionId = 5,
                            QuestionText = "Trouble focusing"
                        },
                        new
                        {
                            ScaleQuestionId = 6,
                            QuestionText = "Dry or gritty eyes"
                        },
                        new
                        {
                            ScaleQuestionId = 7,
                            QuestionText = "Watery eyes"
                        },
                        new
                        {
                            ScaleQuestionId = 8,
                            QuestionText = "Red or bloodshot eyes"
                        },
                        new
                        {
                            ScaleQuestionId = 9,
                            QuestionText = "Burning/itching"
                        },
                        new
                        {
                            ScaleQuestionId = 10,
                            QuestionText = "Eye pain or pressure"
                        },
                        new
                        {
                            ScaleQuestionId = 11,
                            QuestionText = "Headaches after screens"
                        },
                        new
                        {
                            ScaleQuestionId = 12,
                            QuestionText = "Eye strain or tiredness"
                        },
                        new
                        {
                            ScaleQuestionId = 13,
                            QuestionText = "Sensitivity to light"
                        });
                });

            modelBuilder.Entity("ClarifEye.Data.Models.YesNoAnswer", b =>
                {
                    b.Property<int>("YesNoAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YesNoAnswerId"));

                    b.Property<string>("ClarUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SelectedOption")
                        .HasColumnType("int");

                    b.Property<int>("YesNoQuestionId")
                        .HasColumnType("int");

                    b.HasKey("YesNoAnswerId");

                    b.HasIndex("ClarUserId");

                    b.HasIndex("YesNoQuestionId");

                    b.ToTable("YesNoAnswers");
                });

            modelBuilder.Entity("ClarifEye.Data.Models.YesNoQuestion", b =>
                {
                    b.Property<int>("YesNoQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YesNoQuestionId"));

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("YesNoQuestionId");

                    b.ToTable("YesNoQuestions");

                    b.HasData(
                        new
                        {
                            YesNoQuestionId = 1,
                            QuestionText = "Do you wear glasses or contact lenses?"
                        },
                        new
                        {
                            YesNoQuestionId = 2,
                            QuestionText = "Do you have a family history of eye conditions?"
                        },
                        new
                        {
                            YesNoQuestionId = 3,
                            QuestionText = "Have you had eye surgery or trauma before?"
                        },
                        new
                        {
                            YesNoQuestionId = 4,
                            QuestionText = "Do you use digital screens for more than 4 hours per day?"
                        },
                        new
                        {
                            YesNoQuestionId = 5,
                            QuestionText = "Do you take regular breaks while using screens?"
                        },
                        new
                        {
                            YesNoQuestionId = 6,
                            QuestionText = "Are you currently experiencing any vision-related problems?"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ClarifEye.Data.Models.ClarUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsFilled")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ClarUser");

                    b.HasData(
                        new
                        {
                            Id = "user-1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fdbb90bb-9096-4610-9614-f533c1eeedce",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4af4dce4-93f5-4eb3-8309-c0df60c11044",
                            TwoFactorEnabled = false,
                            Age = 34,
                            FirstName = "Ivan",
                            Gender = 0,
                            IsFilled = false,
                            LastName = "Dimitrov",
                            Occupation = "Software Engineer"
                        },
                        new
                        {
                            Id = "user-2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "425795df-47a2-42f7-8557-113fa2383bc5",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5eb1a3b8-6c55-4935-b05f-feab1be5bb6f",
                            TwoFactorEnabled = false,
                            Age = 28,
                            FirstName = "Maria",
                            Gender = 0,
                            IsFilled = false,
                            LastName = "Petrova",
                            Occupation = "Graphic Designer"
                        },
                        new
                        {
                            Id = "user-3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a17cea4-3d03-490b-b9fd-dfc0cfaf6ec5",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddb6e3a2-f01b-4616-ac06-c8d549fec20f",
                            TwoFactorEnabled = false,
                            Age = 45,
                            FirstName = "Georgi",
                            Gender = 0,
                            IsFilled = false,
                            LastName = "Ivanov",
                            Occupation = "Teacher"
                        },
                        new
                        {
                            Id = "user-4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aec14a14-cbc6-4a15-bc87-1b85a185fdbf",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "631873a8-01b0-4e26-9b9c-6389d4a18677",
                            TwoFactorEnabled = false,
                            Age = 22,
                            FirstName = "Elena",
                            Gender = 0,
                            IsFilled = false,
                            LastName = "Koleva",
                            Occupation = "Student"
                        },
                        new
                        {
                            Id = "user-5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d114365-3296-4b8c-8e78-3ab1cd9968cd",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cdf5ddf6-2906-42f5-81fc-ac487041c494",
                            TwoFactorEnabled = false,
                            Age = 39,
                            FirstName = "Nikolay",
                            Gender = 0,
                            IsFilled = false,
                            LastName = "Stoyanov",
                            Occupation = "Mechanic"
                        });
                });

            modelBuilder.Entity("ClarifEye.Data.Models.Choice", b =>
                {
                    b.HasOne("ClarifEye.Data.Models.MultipleChoiceQuestion", "MultipleChoiceQuestion")
                        .WithMany()
                        .HasForeignKey("MultipleChoiceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MultipleChoiceQuestion");
                });

            modelBuilder.Entity("ClarifEye.Data.Models.ChoiceAnswer", b =>
                {
                    b.HasOne("ClarifEye.Data.Models.Choice", "Choice")
                        .WithMany()
                        .HasForeignKey("ChoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClarifEye.Data.Models.ClarUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Choice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClarifEye.Data.Models.ScaleAnswer", b =>
                {
                    b.HasOne("ClarifEye.Data.Models.ClarUser", "User")
                        .WithMany()
                        .HasForeignKey("ClarUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClarifEye.Data.Models.ScaleQuestion", "ScaleQuestion")
                        .WithMany()
                        .HasForeignKey("ScaleQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScaleQuestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClarifEye.Data.Models.YesNoAnswer", b =>
                {
                    b.HasOne("ClarifEye.Data.Models.ClarUser", "User")
                        .WithMany()
                        .HasForeignKey("ClarUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClarifEye.Data.Models.YesNoQuestion", "YesNoQuestion")
                        .WithMany()
                        .HasForeignKey("YesNoQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("YesNoQuestion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
